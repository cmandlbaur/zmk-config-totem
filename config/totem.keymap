//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <170>;
};

/ {
     combos {
            compatible = "zmk,combos";
            combo_esc {
                timeout-ms = <50>;
                key-positions = <0 1>;
                bindings = <&kp ESC>;
            };
            combo_tvp {
                timeout-ms = <100>;
                key-positions = <11 12 13>;
                bindings = <&tog TVP1>;
            };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp N2>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp G &kp I &kp F>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
         &kp Q  &kp W  &kp E     &kp R                 &kp T        &kp Y             &kp U  &kp I        &kp O       &kp P
         &kp A  &kp S  &kp D     &kp F                 &kp G        &kp H             &kp J  &kp K        &kp L       &kp SEMICOLON
&kp TAB  &kp Z  &kp X  &kp C     &kp V                 &kp B        &kp N             &kp M  &kp COMMA    &kp PERIOD  &kp SLASH      &kp SQT
                       &kp LWIN  &mt LEFT_SHIFT SPACE  &kp LCTRL    &mt LSHIFT SPACE  &mo 1  &lt 2 ENTER
            >;
        };

        layer_1 {
            bindings = <
        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp NUMBER_4   &kp N5        &kp NUMBER_6  &kp N7    &kp N8   &kp N9     &kp N0
        &trans        &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LCTRL      &trans        &kp LEFT      &kp DOWN  &kp UP   &kp RIGHT  &trans
&trans  &trans        &trans        &trans          &kp BACKSPACE  &kp DELETE    &trans        &kp HOME  &kp END  &trans     &trans  &trans
                                    &trans          &trans         &trans        &trans        &trans    &trans
            >;
        };

        layer_2 {
            bindings = <
           &kp ESCAPE  &trans  &trans            &trans             &trans    &trans  &trans     &trans     &trans         &trans
           &trans      &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans    &trans  &kp MINUS  &kp EQUAL  &kp BACKSLASH  &trans
&kp GRAVE  &trans      &trans  &trans            &trans             &trans    &trans  &trans     &trans     &trans         &trans  &lt 3 A
                               &trans            &trans             &trans    &trans  &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
